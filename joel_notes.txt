STEPS UNDERTAKEN FOR MCGEE REAL ESTATE PROBLEM


POSTGRES DB EC2 SETUP:

>Go to AWS

EC2 - press Launch Instance - then select ubuntu 20.04 - t2.micro
add tags - name - mcgee_ then add ending either ec2 or DB, first one will be DB
add rule - Custom TCP - port range 5432 - 0.0.0.0/0
create PEM called vpc and download, move this to ~/.ssh/
cd ~/.ssh/
sudo chmod 600 vpc.pem

ssh into EC2 (for database):
Find public ip address on AWS - in my case this was 13.210.56.56
ssh -i ~/.ssh/vpc.pem ubuntu@13.210.56.56
sudo apt update

Install Postgresql:

sudo apt-get install postgresql -y
sudo -u postgres psql
SHOW config_file;
> copy the path that shows - mine was /etc/postgresql/12/main/postgresql.conf
> now exit postgresql - 'quit'
sudo vim /etc/postgresql/12/main/postgresql.conf
Go down the page until you find:
#listen_addresses = 'localhost'
Uncomment the line and change the above to
listen_addresses = '*'


> scroll down to find the hba_file location and copy this to clipboard
> then press esc, then type :wq to write and quit the file

sudo vim /etc/postgresql/12/main/pg_hba.conf
> scroll down to find IPv4 settings, create new line after # TYPE DATABASE - host all all 0.0.0.0/0 md5
> then press esc, then type :wq to write and quit the file

> to check if its running, enter: sudo systemctl status postgresql
> then enter: sudo systemctl restart postgresql

sudo -u postgres psql
ALTER ROLE postgres WITH PASSWORD 'coder';
CREATE DATABASE mcgee_agentoffice;
CREATE DATABASE mcgee_mayblack;


>To test access to db directly - Go to new terminal:
psql --host=13.210.56.56 --port=5432 --username=postgres --dbname=mcgee_agentoffice --password      (ENTER coder password)
psql --host=13.210.56.56 --port=5432 --username=postgres --dbname=mcgee_mayblack --password      (ENTER coder password)





NEW Concepts:
SQALCHEMY BINDS - for connecting flask to multiple databases, unsure if I will get this to work.






>Go to installation folder
git clone "ADDRESS of my git"

cd t3a3
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

export FLASK_APP=main.py
export FLASK_ENV=development
flask run

open new wsl terminal
source ./venv/bin/activate
pip install python-dotenv







STEPS TEST for CLIENT
Clone stuff...

ssh -i ~/.ssh/vpc.pem ubuntu@3.106.129.206

git clone https://github.com/inbox237/Simple_Conveyancer
cd Simple_Conveyancer
sudo apt-get install python3-venv
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

export FLASK_APP=main.py
export FLASK_ENV=development
export DB_URI=postgresql+psycopg2://postgres:coder@54.252.156.13:5432/spotify_api
flask run


SQLALCHEMY_DATABASE_URI = "postgresql+psycopg2://postgres:coder@54.252.156.13:5432/spotify_api"

export DB_URI=postgresql+psycopg2://postgres:coder@54.252.156.13:5432/spotify_api




Install python virtual environment: ```cd T3A3```

Install python virtual environment: ```sudo apt-get install python3-venv```

Create virtual environment: ```python3 -m venv venv```

Activate the virtual environment ```source venv/bin/activate```

Install pip: ```python -m pip install --upgrade pip```

Install modules from requirements.txt: ```pip install -r requirements.txt```

To connect to the database locally, please fill in the "exampleenv" file like this example, then rename the file to ".env":
DB_URI="postgresql+psycopg2://postgres:coder@13.211.86.126/simple_conveyancer"
FLASK_APP=main.py
FLASK_ENV=development
JWT_SECRET_KEY = "duck"
AWS_ACCESS_KEY_ID=1
AWS_SECRET_ACCESS_KEY=1
AWS_S3_BUCKET=1


**To create the database and seed all values with one command, run ONLY the following command:**
Note: This will complete all steps required to run the program including starting flask and opening a local browser.

```flask db-custom start``` (to complete all steps in order)

**Alternatively the following commands can be run separately:**

```flask db-custom drop``` (If there are any tables in the database previously)

```flask db upgrade``` (to add the tables in the migrations directory)

```flask db-custom seed``` (to seed the database)

git clone "address"


python3.8 -m venv venv
source venv/bin/activate
pip install -r requirements.txt


…or create a new repository on the command line
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/inbox237/test.git
git push -u origin main
                
…or push an existing repository from the command line
git remote add origin https://github.com/inbox237/test.git
git branch -M main
git push -u origin main

sudo apt-get install python3-pip
sudo apt-get install python3-venv


sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1

sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2

sudo update-alternatives --config python3

sudo apt-get install python3.8-venv

python3 -m venv venv

source venv/bin/activate




# Create new python virtual environment
alias env="python3 -m venv env"

# Activate virtual env
alias activate="source env/bin/activate"

# Create env virtual requirements
alias req="pip freeze > requirements.txt"

# Install all pip modules
alias install="pip install -r requirements.txt"






